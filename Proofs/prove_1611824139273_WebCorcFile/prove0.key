\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Jan 28 09:55:44 CET 2021
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2147483647
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "D:/Work/Projects/WebCorC/de.tu_bs.cs.isf.cbc.web/Proofs";\include "helper.key";\programVariables {int z; int a; int b; int i; int n; int variant;  Heap heapAtPre;}\problem {
     mul(z, pow(b, i)) = pow(a, n)
   & !i = Z(0(#))
   & gt(n, Z(0(#)))
   & gt(a, Z(0(#)))
   & gt(n, Z(6(#)))
   & gt(a, Z(6(#)))
   & geq(i, Z(0(#)))
   & lt(i, n)
   & wellFormed(heap)
-> {heapAtPre:=heap || variant:=i}
     \<{
         if (i%2==0) {
           i=i/2;
           b=b*b;
         }
         else 
           if (i%2==1) {
             i=i-1;
             z=z*b;
           }
       }\> (lt(i, variant) & geq(i, Z(0(#))))

}

\proof {
(keyLog "0" (keyUser "Malle" ) (keyVersion "7d3deab0763c88edee4f7a08e604661e0dbdd450"))

(autoModeTime "964")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "polySimp_mulComm0" (formula "1") (term "0"))
(rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "10") (term "0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "7"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "7") (term "0"))
(rule "inEqSimp_gtToGeq" (formula "5"))
(rule "mul_literals" (formula "5") (term "1,0,0"))
(rule "add_literals" (formula "5") (term "0,0"))
(rule "inEqSimp_gtToGeq" (formula "4"))
(rule "mul_literals" (formula "4") (term "1,0,0"))
(rule "add_literals" (formula "4") (term "0,0"))
(rule "inEqSimp_gtToGeq" (formula "3"))
(rule "times_zero_1" (formula "3") (term "1,0,0"))
(rule "add_zero_right" (formula "3") (term "0,0"))
(rule "inEqSimp_gtToGeq" (formula "2"))
(rule "times_zero_1" (formula "2") (term "1,0,0"))
(rule "add_zero_right" (formula "2") (term "0,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1"))
(rule "polySimp_elimOne" (formula "10") (term "0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "7"))
(rule "polySimp_mulLiterals" (formula "7") (term "0"))
(rule "polySimp_elimOne" (formula "7") (term "0"))
(rule "inEqSimp_sepPosMonomial1" (formula "5"))
(rule "mul_literals" (formula "5") (term "1"))
(rule "inEqSimp_sepPosMonomial1" (formula "4"))
(rule "mul_literals" (formula "4") (term "1"))
(rule "inEqSimp_sepPosMonomial1" (formula "3"))
(rule "mul_literals" (formula "3") (term "1"))
(rule "inEqSimp_sepPosMonomial1" (formula "2"))
(rule "mul_literals" (formula "2") (term "1"))
(rule "inEqSimp_strengthen1" (formula "6") (ifseqformula "9"))
(rule "add_zero_right" (formula "6") (term "1"))
(rule "inEqSimp_contradEq7" (formula "9") (ifseqformula "6"))
(rule "times_zero_1" (formula "9") (term "1,0,0"))
(rule "add_zero_right" (formula "9") (term "0,0"))
(rule "leq_literals" (formula "9") (term "0"))
(builtin "One Step Simplification" (formula "9"))
(rule "false_right" (formula "9"))
(rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "4"))
(rule "leq_literals" (formula "2") (term "0"))
(builtin "One Step Simplification" (formula "2"))
(rule "true_left" (formula "2"))
(rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "4"))
(rule "leq_literals" (formula "2") (term "0"))
(builtin "One Step Simplification" (formula "2"))
(rule "true_left" (formula "2"))
(rule "ifElseUnfold" (formula "7") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "x"))
(rule "compound_equality_comparison_1" (formula "7") (term "1") (inst "#v0=x_1"))
(rule "variableDeclarationAssign" (formula "7") (term "1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "x_1"))
(rule "assignmentModulo" (formula "7"))
(branch
   (builtin "One Step Simplification" (formula "7"))
   (rule "translateJavaMod" (formula "7") (term "0,1,0"))
   (rule "equality_comparison_simple" (formula "7") (term "1"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "ifElseSplit" (formula "7"))
   (branch "if x true"
      (builtin "One Step Simplification" (formula "8"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "jmod_axiom" (formula "1") (term "0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
      (rule "polySimp_sepNegMonomial" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "newSym_eq" (formula "1") (inst "l=l_0") (inst "newSymDef=mul(i, Z(0(#)))"))
      (rule "times_zero_1" (formula "1") (term "1,1"))
      (rule "add_zero_right" (formula "1") (term "1"))
      (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "1"))
      (rule "eqSymm" (formula "2"))
      (rule "applyEq" (formula "6") (term "0") (ifseqformula "2"))
      (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "2"))
      (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "2"))
      (rule "applyEq" (formula "3") (term "1,0,0") (ifseqformula "2"))
      (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "2"))
      (rule "elimGcdGeq_antec" (formula "6") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
      (rule "leq_literals" (formula "6") (term "0,0"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
      (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0"))
      (rule "polySimp_addLiterals" (formula "6") (term "0,0,0,0"))
      (rule "add_literals" (formula "6") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
      (rule "add_literals" (formula "6") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "6") (term "1,0,0"))
      (rule "add_zero_right" (formula "6") (term "0,0"))
      (rule "leq_literals" (formula "6") (term "0"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "assignmentDivisionInt" (formula "9"))
      (branch
         (builtin "One Step Simplification" (formula "9"))
         (rule "translateJavaDivInt" (formula "9") (term "0,1,0"))
         (rule "applyEq" (formula "9") (term "0,0,1,0") (ifseqformula "2"))
         (rule "applyEqRigid" (formula "9") (term "0,1,0") (ifseqformula "1"))
         (rule "assignmentMultiplicationInt" (formula "9") (term "1"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "emptyModality" (formula "9") (term "1"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_homoInEq1" (formula "9") (term "0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0"))
         (rule "add_literals" (formula "9") (term "1,1,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "0,0"))
         (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "6"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_geqRight" (formula "9"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "7"))
         (rule "qeq_literals" (formula "1") (term "0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch
         (builtin "One Step Simplification" (formula "9"))
         (rule "equal_literals" (formula "9") (term "0"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "closeTrue" (formula "9"))
      )
   )
   (branch "if x false"
      (builtin "One Step Simplification" (formula "8"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "jmod_axiom" (formula "7") (term "0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
      (rule "polySimp_sepNegMonomial" (formula "7"))
      (rule "polySimp_mulLiterals" (formula "7") (term "0"))
      (rule "ifUnfold" (formula "8") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_2"))
      (rule "compound_equality_comparison_1" (formula "8") (term "1") (inst "#v0=x_3"))
      (rule "variableDeclarationAssign" (formula "8") (term "1"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_3"))
      (rule "assignmentModulo" (formula "8"))
      (branch
         (builtin "One Step Simplification" (formula "8"))
         (rule "translateJavaMod" (formula "8") (term "0,1,0"))
         (rule "equality_comparison_simple" (formula "8") (term "1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "jdiv_axiom" (formula "7") (term "0,0"))
         (rule "eqSymm" (formula "1"))
         (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "5"))
         (rule "leq_literals" (formula "1") (term "0,0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "eqSymm" (formula "1"))
         (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "1"))
         (rule "div_axiom" (formula "1") (term "1") (inst "quotient=quotient_0"))
         (rule "qeq_literals" (formula "1") (term "0,1,1"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "equal_literals" (formula "1") (term "0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1,1,1"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "polySimp_addComm1" (formula "3") (term "1"))
         (rule "add_literals" (formula "3") (term "0,1"))
         (rule "inEqSimp_commuteLeq" (formula "2"))
         (rule "inEqSimp_homoInEq1" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "1"))
         (rule "eqSymm" (formula "11"))
         (rule "applyEq" (formula "4") (term "1") (ifseqformula "1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1"))
         (rule "polySimp_rightDist" (formula "3") (term "1"))
         (rule "mul_literals" (formula "3") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
         (rule "inEqSimp_strengthen1" (formula "2") (ifseqformula "11"))
         (rule "inEqSimp_contradEq7" (formula "11") (ifseqformula "2"))
         (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
         (rule "add_literals" (formula "11") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,0"))
         (rule "leq_literals" (formula "11") (term "0"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "false_right" (formula "11"))
         (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "3"))
         (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
         (rule "inEqSimp_homoInEq1" (formula "3"))
         (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
         (rule "add_literals" (formula "3") (term "1,0"))
         (rule "times_zero_1" (formula "3") (term "0"))
         (rule "leq_literals" (formula "3"))
         (rule "true_left" (formula "3"))
         (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "2"))
         (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "2"))
         (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "2"))
         (rule "applyEq" (formula "11") (term "0,0,0,0,1,0") (ifseqformula "2"))
         (rule "applyEq" (formula "8") (term "0") (ifseqformula "2"))
         (rule "inEqSimp_homoInEq1" (formula "8"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0"))
         (rule "mul_literals" (formula "8") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "8") (term "0"))
         (rule "add_literals" (formula "8") (term "0,0"))
         (rule "add_zero_left" (formula "8") (term "0"))
         (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
         (rule "inEqSimp_homoInEq0" (formula "3"))
         (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
         (rule "add_literals" (formula "3") (term "1,0"))
         (rule "times_zero_1" (formula "3") (term "0"))
         (rule "qeq_literals" (formula "3"))
         (rule "true_left" (formula "3"))
         (rule "applyEq" (formula "4") (term "1,0,0") (ifseqformula "2"))
         (rule "applyEq" (formula "8") (term "1,1") (ifseqformula "2"))
         (rule "polySimp_addAssoc" (formula "8") (term "1"))
         (rule "add_literals" (formula "8") (term "0,1"))
         (rule "inEqSimp_invertInEq0" (formula "7"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0"))
         (rule "times_zero_2" (formula "7") (term "1"))
         (rule "elimGcdGeq_antec" (formula "7") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(2(#))"))
         (rule "leq_literals" (formula "7") (term "0,0"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "add_zero_right" (formula "7") (term "0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
         (rule "times_zero_1" (formula "7") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "7") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
         (rule "add_literals" (formula "7") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "7") (term "1,0,0"))
         (rule "add_zero_right" (formula "7") (term "0,0"))
         (rule "leq_literals" (formula "7") (term "0"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "polyDiv_pullOut" (formula "1") (term "0") (inst "polyDivCoeff=quotient_0"))
         (rule "equal_literals" (formula "1") (term "0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
         (rule "polySimp_homoEq" (formula "1"))
         (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0,1,0"))
         (rule "add_literals" (formula "1") (term "1,1,0,0,0,1,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,0,1,0"))
         (rule "add_zero_right" (formula "1") (term "0,0,0,1,0"))
         (rule "div_literals" (formula "1") (term "0,0,1,0"))
         (rule "add_zero_left" (formula "1") (term "0,1,0"))
         (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,0"))
         (rule "times_zero_1" (formula "1") (term "0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "jdiv_axiom" (formula "2") (term "0"))
         (rule "eqSymm" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "0,0,2,0"))
         (rule "polySimp_rightDist" (formula "2") (term "0,0,2,0"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,2,0"))
         (rule "mul_literals" (formula "2") (term "0,0,0,2,0"))
         (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "3"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "0,0"))
         (rule "mul_literals" (formula "2") (term "1,0,0"))
         (rule "inEqSimp_subsumption6" (formula "2") (term "0,0") (ifseqformula "7"))
         (rule "greater_literals" (formula "2") (term "0,0,0,0"))
         (builtin "One Step Simplification" (formula "2"))
         (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
         (rule "leq_literals" (formula "2") (term "0,0,0"))
         (builtin "One Step Simplification" (formula "2"))
         (rule "polyDiv_pullOut" (formula "2") (term "0") (inst "polyDivCoeff=quotient_0"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,2,0"))
         (rule "equal_literals" (formula "2") (term "0,0"))
         (builtin "One Step Simplification" (formula "2"))
         (rule "polySimp_homoEq" (formula "2"))
         (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0,0,1,0"))
         (rule "add_literals" (formula "2") (term "1,1,0,0,0,1,0"))
         (rule "times_zero_1" (formula "2") (term "1,0,0,0,1,0"))
         (rule "add_zero_right" (formula "2") (term "0,0,0,1,0"))
         (rule "div_literals" (formula "2") (term "0,0,1,0"))
         (rule "add_zero_left" (formula "2") (term "0,1,0"))
         (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
         (rule "add_literals" (formula "2") (term "1,0"))
         (rule "times_zero_1" (formula "2") (term "0"))
         (builtin "One Step Simplification" (formula "2"))
         (rule "true_left" (formula "2"))
         (rule "ifSplit" (formula "9"))
         (branch "if x_2 true"
            (builtin "One Step Simplification" (formula "10"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "jmod_axiom" (formula "1") (term "0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
            (rule "polySimp_homoEq" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
            (rule "mul_literals" (formula "1") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0"))
            (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
            (rule "polySimp_pullOutFactor0" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,0"))
            (rule "times_zero_1" (formula "1") (term "0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "assignmentSubtractionInt" (formula "9") (term "1"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "translateJavaSubInt" (formula "9") (term "0,1,0"))
            (rule "polySimp_elimSub" (formula "9") (term "0,1,0"))
            (rule "mul_literals" (formula "9") (term "1,0,1,0"))
            (rule "polySimp_addComm0" (formula "9") (term "0,1,0"))
            (rule "applyEq" (formula "9") (term "1,0,1,0") (ifseqformula "1"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,1,0"))
            (rule "add_literals" (formula "9") (term "0,0,1,0"))
            (rule "add_zero_left" (formula "9") (term "0,1,0"))
            (rule "assignmentMultiplicationInt" (formula "9") (term "1"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "emptyModality" (formula "9") (term "1"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "inEqSimp_homoInEq1" (formula "9") (term "0"))
            (rule "polySimp_pullOutFactor1" (formula "9") (term "0,0"))
            (rule "add_literals" (formula "9") (term "1,0,0"))
            (rule "times_zero_1" (formula "9") (term "0,0"))
            (rule "leq_literals" (formula "9") (term "0"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "inEqSimp_geqRight" (formula "9"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_contradInEq5" (formula "1") (ifseqformula "7"))
            (rule "greater_literals" (formula "1") (term "0,0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "times_zero_1" (formula "1") (term "1,0"))
            (rule "qeq_literals" (formula "1") (term "0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_2 false"
            (builtin "One Step Simplification" (formula "10"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "jmod_axiom" (formula "9") (term "0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,0"))
            (rule "polySimp_homoEq" (formula "9"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "9") (term "0,1,0"))
            (rule "mul_literals" (formula "9") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0"))
            (rule "add_zero_left" (formula "9") (term "0,0"))
            (rule "applyEq" (formula "9") (term "0,1,0") (ifseqformula "2"))
            (rule "polySimp_pullOutFactor0" (formula "9") (term "0"))
            (rule "add_literals" (formula "9") (term "1,0"))
            (rule "times_zero_1" (formula "9") (term "0"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "closeTrue" (formula "9"))
         )
      )
      (branch
         (builtin "One Step Simplification" (formula "8"))
         (rule "equal_literals" (formula "8") (term "0"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "closeTrue" (formula "8"))
      )
   )
)
(branch
   (builtin "One Step Simplification" (formula "7"))
   (rule "equal_literals" (formula "7") (term "0"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "closeTrue" (formula "7"))
)
)

}
