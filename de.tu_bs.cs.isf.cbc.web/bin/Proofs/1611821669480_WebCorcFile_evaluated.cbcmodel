<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cbcmodel="http://www.example.org/cbcmodel">
  <cbcmodel:JavaVariables>
    <variables name="int[] A"/>
    <variables name="int wt"/>
    <variables name="int wb"/>
    <variables name="int bb"/>
    <variables name="int t"/>
  </cbcmodel:JavaVariables>
  <cbcmodel:GlobalConditions>
    <conditions name="A!=null"/>
    <conditions name="A.length>0"/>
    <conditions name="0&lt;=wb&amp;wb&lt;=wt&amp;wt&lt;=bb&amp;bb&lt;=A.lengt"/>
    <conditions name="(\forall int i; ((i>=0 &amp; i&lt;A.length)->(A[i]=0 | A[i] = 1 | A[i] =2)))"/>
  </cbcmodel:GlobalConditions>
  <cbcmodel:CbCFormula name="WebCorc File" comment="">
    <statement name="compositionStatement">
      <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement">
        <firstStatement name=" wb = 0; wt = 0; bb = A.length;" comment="">
          <refinement name=" wb = 0; wt = 0; bb = A.length;" comment="">
            <postCondition name=" s(A,wb,wt,bb)"/>
            <preCondition name="s(A,0,0,A.lengt)"/>
          </refinement>
          <postCondition name=" s(A,wb,wt,bb)"/>
          <preCondition name="s(A,0,0,A.lengt)"/>
        </firstStatement>
        <secondStatement name="repetitionStatement" comment="">
          <refinement xsi:type="cbcmodel:SmallRepetitionStatement" name="repetitionStatement">
            <postCondition name=" s(A,wb,wt,bb) &amp; wt=bb"/>
            <preCondition name="s(A,0,0,A.lengt)"/>
            <loopStatement name="selectionStatement" comment="">
              <refinement xsi:type="cbcmodel:SelectionStatement" name="selectionStatement" comment="">
                <guards name=""/>
                <guards name=""/>
                <guards name=""/>
                <commands name=" t = A[wt]; A[wt] = A[wb]; A[wb] = t; wt = wt + 1; wb = wb + 1;" comment="">
                  <refinement name=" t = A[wt]; A[wt] = A[wb]; A[wb] = t; wt = wt + 1; wb = wb + 1;" comment="">
                    <postCondition name=" s(A,wb,wt,bb)"/>
                    <preCondition name="{( s(A,wb,wt,bb))&amp;( wt != bb)}&amp;{}"/>
                  </refinement>
                  <postCondition name=" s(A,wb,wt,bb)"/>
                  <preCondition name="{( s(A,wb,wt,bb))&amp;( wt != bb)}&amp;{}"/>
                </commands>
                <commands name=" wt = wt + 1;" comment="">
                  <refinement name=" wt = wt + 1;" comment="">
                    <postCondition name=" s(A,wb,wt,bb)"/>
                    <preCondition name="{( s(A,wb,wt,bb))&amp;( wt != bb)}&amp;{}"/>
                  </refinement>
                  <postCondition name=" s(A,wb,wt,bb)"/>
                  <preCondition name="{( s(A,wb,wt,bb))&amp;( wt != bb)}&amp;{}"/>
                </commands>
                <commands name=" t = A[wt]; A[wt] = A[bb-1]; A[bb-1] = t; bb = bb - 1;" comment="">
                  <refinement name=" t = A[wt]; A[wt] = A[bb-1]; A[bb-1] = t; bb = bb - 1;" comment="">
                    <postCondition name=" s(A,wb,wt,bb)"/>
                    <preCondition name="{( s(A,wb,wt,bb))&amp;( wt != bb)}&amp;{}"/>
                  </refinement>
                  <postCondition name=" s(A,wb,wt,bb)"/>
                  <preCondition name="{( s(A,wb,wt,bb))&amp;( wt != bb)}&amp;{}"/>
                </commands>
              </refinement>
              <postCondition name=" s(A,wb,wt,bb)"/>
              <preCondition name="{( s(A,wb,wt,bb))&amp;( wt != bb)}"/>
            </loopStatement>
            <variant name="bb-wt"/>
            <invariant name=" s(A,wb,wt,bb)"/>
            <guard name=" wt != bb"/>
          </refinement>
          <postCondition name=" s(A,wb,wt,bb) &amp; wt=bb"/>
          <preCondition name="s(A,0,0,A.lengt)"/>
        </secondStatement>
        <intermediateCondition name=" s(A,wb,wt,bb)"/>
      </refinement>
      <postCondition name=" s(A,wb,wt,bb) &amp; wt=bb"/>
      <preCondition name="s(A,0,0,A.lengt)"/>
    </statement>
    <preCondition name="s(A,0,0,A.lengt)"/>
    <postCondition name=" s(A,wb,wt,bb) &amp; wt=bb"/>
  </cbcmodel:CbCFormula>
</xmi:XMI>
